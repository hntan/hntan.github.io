[{"categories":["Java"],"content":"Scenario 1: Simple Synchronous Operation @GET @Produces(MediaType.TEXT_PLAIN) public String greeting() { return \u0026#34;Hello!\u0026#34;; } Use Case: You have a straightforward operation that completes quickly and doesn\u0026rsquo;t involve any asynchronous tasks (database queries, network calls, etc.).\nWhy No Uni: In this case, using Uni would introduce unnecessary complexity. You can simply return the result directly as a String.\nScenario 2: Asynchronous Operation with a Single Result @GET @Produces(MediaType.APPLICATION_JSON) public Uni\u0026lt;MyData\u0026gt; getData() { return Uni.createFrom().emitter(e -\u0026gt; { // Asynchronous task to fetch MyData (e.g., database query) e.complete(result); // Emit the result // Or e.fail(error); // Emit an error if something goes wrong }); } Use Case: Your operation involves an asynchronous task that will eventually produce a single result (MyData in this example).\nWhy Uni: Uni is perfect for this scenario. It represents the asynchronous result, allowing you to:\nHandle the result when it becomes available. Handle potential errors gracefully. Compose with other asynchronous operations. Scenario 3: Asynchronous Operation with Multiple Results @GET @Produces(MediaType.SERVER_SENT_EVENTS) public Multi\u0026lt;String\u0026gt; getUpdates() { return Multi.createFrom().ticks().every(Duration.ofSeconds(1)) .onItem().transform(n -\u0026gt; \u0026#34;Update #\u0026#34; + n); } Use Case: Your operation produces a continuous stream of results (e.g., real-time updates).\nWhy Multi (Not Uni): Multi is designed for streams of data. It allows you to emit multiple values over time and have the client receive them as they become available.\nScenario 4: Fire-and-Forget Operation @POST @Consumes(MediaType.APPLICATION_JSON) public Uni\u0026lt;Void\u0026gt; processData(MyData data) { return Uni.createFrom().voidItem() .onItem().invoke(() -\u0026gt; { // Asynchronous processing of the data (e.g., sending an email) }); } Use Case: You initiate an asynchronous task but don\u0026rsquo;t need to return a specific result to the client.\nWhy Uni: Returning Uni signals that the operation has been initiated and will complete in the background. The client doesn\u0026rsquo;t need to wait for a specific result.\nKey Points: Synchronous: No asynchronous tasks? Return the result directly (e.g., String, MyData). Single Asynchronous Result: Use Uni to represent the result and handle it when it becomes available. Multiple Asynchronous Results: Use Multi to emit a stream of data. Fire and Forget: Use Uni when you don\u0026rsquo;t need to return a specific value. ","permalink":"/posts/quarkus-munity-uni/","tags":["java","quarkus","reactive","mutiny"],"title":"When choosing Mutiny in Quarkus REST"},{"categories":["Java"],"content":"Introduction Java\u0026rsquo;s java.net.http.HttpClient (introduced in Java 11) provides a modern and standardized way to perform HTTP requests. Enabling detailed logging for this client offers invaluable insights when troubleshooting network issues, analyzing request/response behavior, and optimizing application performance.\nTo enable the log, add this JVM option -Djdk.httpclient.HttpClient.log=errors,requests when staring your application.\nCode example I use this library as a client to call OpenAI API, the library uses httpclient for making http request.\nHttpClient httpClient = HttpClient.newBuilder() .connectTimeout(Duration.ofSeconds(20)) .executor(Executors.newFixedThreadPool(3)) .build(); OpenAI openAI = OpenAI.newBuilder(System.getenv(\u0026#34;OPENAI_API_KEY\u0026#34;)) .httpClient(httpClient) .build(); ChatClient chatClient = openAI.chatClient(); CreateChatCompletionRequest request = CreateChatCompletionRequest.newBuilder() .model(OpenAIModel.GPT_3_5_TURBO) .message(ChatMessage.userMessage(\u0026#34;Who won the world series in 2020?\u0026#34;)) .build(); CompletableFuture\u0026lt;ChatCompletion\u0026gt; chatCompletion = chatClient.createChatCompletionAsync(request); chatCompletion.thenAccept(System.out::println); Now, check the log. You can see the output as bellow.\n2024-05-06 14:55:18.048 INFO [task-1] jdk.httpclient.HttpClient : REQUEST: https://api.openai.com/v1/chat/completions POST 2024-05-06 14:55:19.222 INFO [task-2] jdk.httpclient.HttpClient : RESPONSE: (POST https://api.openai.com/v1/chat/completions) 200 HTTP_2 Local port: 53495 ","permalink":"/posts/java-httpclient-logging/","tags":["java","java 11","java logging","programming"],"title":"Enable Logging for Java 11 HttpClient"},{"categories":["Python"],"content":"Strings: The Textual Heart of Python In Python, strings are sequences of characters used to represent text. You can think of them as an ordered collection of letters, numbers, symbols, and spaces. To define a string, you enclose your text within:\nSingle quotes, double quotes Python is flexible with strings. You can enclose them in eithers in single quotes ' or double quotes \u0026quot;.\ns1 = \u0026#39;Hello world\u0026#39; # Single quotes s2 = \u0026#34;Hello world\u0026#34; # Double quotes The key is to be consistent, but there are times you\u0026rsquo;ll want to include one type of quote within a string enclosed by the other type.\ns3 = \u0026#34;This is John\u0026#39;s car.\u0026#34; # Double quotes with a single quote inside s4 = \u0026#39;She said, \u0026#34;Hello!\u0026#34;\u0026#39; # Single quotes with double quotes inside Triple quotes For multiple-line of strings or strings containing both types of quotes, tripple quotes (either ' or \u0026quot;) is convenient.\ns5 = \u0026#39;\u0026#39;\u0026#39;This string can have both \u0026#39;single quotes\u0026#39; and \u0026#34;double quotes\u0026#34; without issues\u0026#39;\u0026#39;\u0026#39; s5 # Output: \u0026#39;This string can have both \\\u0026#39;single quotes\\\u0026#39; and \u0026#34;double quotes\u0026#34; without issues\u0026#39; str.format() and f-strings for string formatting str.format(): use curly braces as placeholders for values to be inserted.\nname = \u0026#39;Bob\u0026#39; text = str.format(\u0026#39;hello {}\u0026#39;, name) text # Output: \u0026#39;Hello Bob\u0026#39; f-strings: Include variables directly within curly braces.\nname = \u0026#39;Alice\u0026#39; text = f\u0026#39;Hello {name}\u0026#39; text # \u0026#39;Hello Alice\u0026#39; Basic string operations Indexing: access individual characters using square brackets and their position in the string\nmy_string = \u0026#39;Hello world\u0026#39; my_string[0] # Output: \u0026#39;H Splicing: extract a substring using a start and an end\nmy_string = \u0026#39;Hello world\u0026#39; my_string[0:5] # Output: \u0026#39;Hello\u0026#39; find(): Returns the index of the first occurrence of a substring. Or return -1 if not found\nsentence = \u0026#34;Learning Python is fun!\u0026#34; position = sentence.find(\u0026#34;Python\u0026#34;) position # Output: 9 index(): Returns the index of the first occurrence of a substring. Or it raises an exception if not found.\nsentence = \u0026#34;Learning Python is fun!\u0026#34; position = sentence.index(\u0026#34;Python\u0026#34;) position # Output: 9 position = sentence.index(\u0026#34;Java\u0026#34;) # Output: ValueError: substring not found split(): Splits a string into a list of substrings based on a delimiter\nsentence = \u0026#34;Learning Python is fun!\u0026#34; words = sentence.split() words # Output: [\u0026#39;Learning\u0026#39;, \u0026#39;Python\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;fun!\u0026#39;] join(): concatenat elements contained within an iterable object\nwords = [\u0026#34;Hello\u0026#34;, \u0026#34;World\u0026#34;] sentence = \u0026#34;-\u0026#34;.join(words) sentence # \u0026#39;Hello-World\u0026#39; ","permalink":"/posts/python-datatype-strings/","tags":["python","programming"],"title":"Python Datatype - Strings"},{"categories":["Dev's life"],"content":"When considering where to live in Vietnam, it is important to define what makes a place \u0026ldquo;worth living\u0026rdquo;. Nowadays, remote work is more feasible, especially for software programmers like me. So for me, a worth living place is one that is easy to get around, affordable for living, and offers plenty of opportunities to immerse oneself in nature.\nCriteria Walking condition If you love to walk, Vietnam can be challenging place to live. The country is very crowded, and public transportation options are limited. This can make walking and driving difficult and stressful. For me, the first criteria for a worth living place is one that is easy to walk around.\nAffordable for living Renting an apartment should be affordable.\nPlaces to immerse oneself in nature Finally, a worth living place should offer plenty of opportunities to immerse oneself in nature. Vietnam is a beautify country with a diverse landscape. There are mountains, beaches, forests, and rivers to explore. If you love the outdoors, it is important to find a place that has plenty of opportunities to get out and enjoy nature.\nWhere to Live in Vietnam Based on these criteria, here are a few of the best places to live in Vietnam:\nDa Nang Da Nang is a large city with a beautiful beach. I think it has the biggest beach in Vietnam. It also has a very beautiful river that divides Da Nang city into two halves: the old center and the new coastal districts. There is a wide riverside road path where you can walk and enjoy the view.\nNha Trang It\u0026rsquo;s smaller than Da Nang, but the beach is also long. It has beautiful islands and the food is cheap and fresh.\n","permalink":"/posts/worth-living-place-vn/","tags":["thought","remote"],"title":"Two worth living places in Vietnam"},{"categories":["Dev's life"],"content":"Motivation First contribution to an open-source is the significant milestone in my journey as a software engineer, it\u0026rsquo;s a great way to learn and give back to the community.\nI\u0026rsquo;m currently working for Gridly, which is a content management and localization system. Gridly has a feature called Connector and it uses Airbyte internally for syncing data from other sources to Gridly.\nAirbyte Gridly connector So, I decided to write Gridly as a source connector to sync data to other destinations. This is the PR .\nThe connector\u0026rsquo;s documentation is published as part of a merged PR, you can check it out here to see how to set up and use Gridly as an Airbyte source connector.\nAnd you know what? I also received $500 as a reward because my PR was submitted during the Airbyte Hacktoberfest event The connector is currently available in the self-hosted, open-source version of Airbyte .\n","permalink":"/posts/first-open-source-contribution/","tags":["open-sources","python","airbyte"],"title":"First open-source contribution"},{"categories":["Dev's life"],"content":"Language learning has always been a challenge for me, even with my native Vietnamese. Despite years of studying English, I still find myself working hard to improve.\nNo, the paragraph above is not my original one. It\u0026rsquo;s the version from Gemini.\nAnd my second one as well.\nAnd \u0026hellip;\nBut that doesn\u0026rsquo;t matter now. I\u0026rsquo;ve decided to start a blog to practice my writing. As a software engineer, I believe it will help me deepen my technical knowledge and build a personal portfolio.\n","permalink":"/posts/start-to-write/","tags":["thought","write"],"title":"Start to write"},{"categories":null,"content":"Hello, my name is Tan Ho.\nI currently work as a full-time Senior Java Developer at Gridly. While I\u0026rsquo;m not actively seeking new opportunities, I\u0026rsquo;m interested in remote work for the future. If you have a remote position and think I might be a good fit, please check out my Linkedin profile and resume .\n","permalink":"/about/","tags":null,"title":"About me"},{"categories":null,"content":"","permalink":"/search/_index.es/","tags":null,"title":""},{"categories":null,"content":"","permalink":"/search/_index.fr/","tags":null,"title":""},{"categories":null,"content":"","permalink":"/search/_index.hi/","tags":null,"title":""},{"categories":null,"content":"","permalink":"/search/_index.jp/","tags":null,"title":""},{"categories":null,"content":"","permalink":"/search/_index.pl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"/search/_index.ru/","tags":null,"title":""},{"categories":null,"content":"","permalink":"/search/_index.zh-cn/","tags":null,"title":""}]