<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Challenges on Tan Ho</title>
    <link>http://honhattan.net/challenges/</link>
    <description>Recent content in Challenges on Tan Ho</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 May 2019 10:09:09 +0700</lastBuildDate>
    
	<atom:link href="http://honhattan.net/challenges/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Character Encoding</title>
      <link>http://honhattan.net/challenges/day-7-character-encoding/</link>
      <pubDate>Fri, 31 May 2019 10:09:09 +0700</pubDate>
      
      <guid>http://honhattan.net/challenges/day-7-character-encoding/</guid>
      <description>What&amp;rsquo;s character encoding? Words and sentenses are created from characters. Those characters are stored in computers in bytes.
Basically, you can visuallize by assuming all characters are stored in computer using a special code. A character encoding provides a key to unlock the code. It is set of a mappings between bytes in computers and the characters in character set. Without key, the data looks like garbage.
Unicode Unicode assigns unique numbers to characters used all over the world.</description>
    </item>
    
    <item>
      <title>Learning Go</title>
      <link>http://honhattan.net/challenges/day-3-golang/</link>
      <pubDate>Mon, 27 May 2019 20:09:41 +0700</pubDate>
      
      <guid>http://honhattan.net/challenges/day-3-golang/</guid>
      <description>Go is statically typed, complied programming language designed at Google by Robert Griesemer (V8 engine, Java Hotspt VM), Rob Pike (Unix Team, UTF-8) and Ken Tompson (Unix).
It&amp;rsquo;s similar to C but memory safety, garbage collection, structral typing, and CSP-type concurrency.
 Did the C++ committee really believe that what was wrong with C++ was that it didn&amp;rsquo;t have enough features?
&amp;ndash; Rob Pike &amp;ndash;
Robert: Starting point: C, fix some obvious flaws, remove crud, add a few missing features.</description>
    </item>
    
    <item>
      <title>Java Daemon Thread</title>
      <link>http://honhattan.net/challenges/day-2-java-thread/</link>
      <pubDate>Sun, 26 May 2019 17:51:31 +0700</pubDate>
      
      <guid>http://honhattan.net/challenges/day-2-java-thread/</guid>
      <description>A daemon thread is a thread that is considered doing some tasks in the background like handling requests or various chronjobs that can exits in an application.
Properties  It can not prevent JVM from exiting when all user threads finish their executions. It is an utmost low priority thread.  Methods  public final void setDaemon(boolean on): This method is used to mark the current thread as daemon thread or normal thread.</description>
    </item>
    
    <item>
      <title>Flask Framework</title>
      <link>http://honhattan.net/challenges/day-1-flask-framework/</link>
      <pubDate>Sat, 25 May 2019 20:08:43 +0700</pubDate>
      
      <guid>http://honhattan.net/challenges/day-1-flask-framework/</guid>
      <description>Create a new environment for our example.
conda create -n myflask python=3.7.3 flask We create an envionment with flask package and specified python version 3.7.3. If version is not specified, newest version is downloaded.
Below is what the output will look like on my terminal.
(base) tan@tan-pc:~/Workspace/py/my-flask-app$ conda create -n myflask python=3.7.3 flask Collecting package metadata: done Solving environment: done ## Package Plan ## environment location: /home/tan/Workspace/tools/anaconda3/envs/myflask added / updated specs: - flask - python=3.</description>
    </item>
    
  </channel>
</rss>